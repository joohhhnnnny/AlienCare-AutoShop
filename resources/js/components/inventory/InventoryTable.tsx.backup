import { AlertTriangle, CheckCircle, Package, Plus, Search, Loader2, RefreshCw } from "lucide-react";
import { useState, useEffect } from "react";
import { InventoryItem } from "../../types/inventory";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "../ui/dialog";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../ui/table";
import { Alert, AlertDescription } from "../ui/alert";
import { useInventoryItems } from "../../hooks/useInventory";

export function InventoryTable() {
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState<string>("all");
  const [stockFilter, setStockFilter] = useState<string>("all");
  const [isAddStockDialogOpen, setIsAddStockDialogOpen] = useState(false);
  const [isAddPartDialogOpen, setIsAddPartDialogOpen] = useState(false);
  const [selectedPartId, setSelectedPartId] = useState("");
  const [stockToAdd, setStockToAdd] = useState("");
  const [newPart, setNewPart] = useState({
    item_id: '',
    item_name: '',
    description: '',
    category: '',
    stock: '',
    reorder_level: '',
    unit_price: '',
    supplier: '',
    location: ''
  });

  // Use real API data
  const { 
    data: inventoryData, 
    loading, 
    error, 
    addStock,
    updateFilters,
    refresh 
  } = useInventoryItems({
    search: searchTerm || undefined,
    category: categoryFilter !== "all" ? categoryFilter : undefined,
    low_stock: stockFilter === "low" ? true : undefined,
    per_page: 50
  });

  const parts = inventoryData?.data || [];
  const categories = [...new Set(parts.map(part => part.category))];

  // Update filters when inputs change
  useEffect(() => {
    const timer = setTimeout(() => {
      updateFilters({
        search: searchTerm || undefined,
        category: categoryFilter !== "all" ? categoryFilter : undefined,
        low_stock: stockFilter === "low" ? true : undefined,
      });
    }, 500); // Debounce API calls

    return () => clearTimeout(timer);
  }, [searchTerm, categoryFilter, stockFilter, updateFilters]);

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          Failed to load inventory data: {error}
        </AlertDescription>
      </Alert>
    );
  }

  const handleAddStock = async () => {
    if (!selectedPartId || !stockToAdd) return;

    const stockAmount = parseInt(stockToAdd);
    if (isNaN(stockAmount) || stockAmount <= 0) return;

    setParts(prev => prev.map(part =>
      part.id === selectedPartId
        ? {
            ...part,
            currentStock: Math.min(part.currentStock + stockAmount, part.maxCapacity),
            lastUpdated: new Date()
          }
        : part
    ));

    setSelectedPartId("");
    setStockToAdd("");
    setIsAddStockDialogOpen(false);
  };

  const handleAddNewPart = () => {
    if (!newPart.partNumber || !newPart.description || !newPart.category) return;

    const part: Part = {
      id: `p${Date.now()}`,
      partNumber: newPart.partNumber,
      description: newPart.description,
      category: newPart.category,
      currentStock: parseInt(newPart.currentStock) || 0,
      minThreshold: parseInt(newPart.minThreshold) || 10,
      maxCapacity: parseInt(newPart.maxCapacity) || 100,
      unitCost: parseFloat(newPart.unitCost) || 0,
      supplier: newPart.supplier || 'Unknown',
      location: newPart.location || 'TBD',
      lastUpdated: new Date()
    };

    setParts(prev => [...prev, part]);
    setNewPart({
      partNumber: '',
      description: '',
      category: '',
      currentStock: '',
      minThreshold: '',
      maxCapacity: '',
      unitCost: '',
      supplier: '',
      location: ''
    });
    setIsAddPartDialogOpen(false);
  };

  const getStockStatus = (part: Part) => {
    const stockPercentage = part.currentStock / part.maxCapacity;
    const isBelowThreshold = part.currentStock <= part.minThreshold;

    if (isBelowThreshold) {
      return part.currentStock === 0 ? 'OUT_OF_STOCK' : 'LOW_STOCK';
    } else if (stockPercentage >= 0.8) {
      return 'HIGH_STOCK';
    } else {
      return 'NORMAL_STOCK';
    }
  };

  const getStockBadge = (part: Part) => {
    const status = getStockStatus(part);

    switch (status) {
      case 'OUT_OF_STOCK':
        return <Badge variant="destructive" className="flex items-center gap-1">
          <AlertTriangle className="h-3 w-3" />
          Out of Stock
        </Badge>;
      case 'LOW_STOCK':
        return <Badge variant="destructive" className="flex items-center gap-1">
          <AlertTriangle className="h-3 w-3" />
          Low Stock
        </Badge>;
      case 'HIGH_STOCK':
        return <Badge variant="secondary" className="flex items-center gap-1">
          <Package className="h-3 w-3" />
          High Stock
        </Badge>;
      default:
        return <Badge variant="outline" className="flex items-center gap-1">
          <CheckCircle className="h-3 w-3" />
          Good Stock
        </Badge>;
    }
  };

  const getStockBarColor = (part: Part) => {
    const status = getStockStatus(part);
    switch (status) {
      case 'OUT_OF_STOCK':
      case 'LOW_STOCK':
        return 'bg-destructive';
      case 'HIGH_STOCK':
        return 'bg-primary';
      default:
        return 'bg-primary/80';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-foreground">Parts Inventory</h1>
          <p className="text-muted-foreground">
            Manage and monitor all parts and consumables
          </p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isAddStockDialogOpen} onOpenChange={setIsAddStockDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-primary text-primary-foreground hover:bg-primary/90">
                <Plus className="h-4 w-4 mr-2" />
                Add Stock
              </Button>
            </DialogTrigger>
            <DialogContent className="bg-popover border-border">
              <DialogHeader>
                <DialogTitle className="text-foreground">Add Stock to Existing Part</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="part-select" className="text-foreground">Select Part</Label>
                  <Select value={selectedPartId} onValueChange={setSelectedPartId}>
                    <SelectTrigger className="bg-input border-border text-foreground">
                      <SelectValue placeholder="Choose a part to restock" />
                    </SelectTrigger>
                    <SelectContent className="bg-popover border-border">
                      {parts.map(part => (
                        <SelectItem key={part.id} value={part.id}>
                          {part.partNumber} - {part.description} (Current: {part.currentStock})
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="stock-amount" className="text-foreground">Stock to Add</Label>
                  <Input
                    id="stock-amount"
                    type="number"
                    value={stockToAdd}
                    onChange={(e) => setStockToAdd(e.target.value)}
                    placeholder="Enter quantity to add"
                    min="1"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <Button onClick={handleAddStock} className="w-full bg-primary text-primary-foreground hover:bg-primary/90">
                  Add Stock
                </Button>
              </div>
            </DialogContent>
          </Dialog>

          <Dialog open={isAddPartDialogOpen} onOpenChange={setIsAddPartDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" className="border-border text-foreground hover:bg-muted">
                <Package className="h-4 w-4 mr-2" />
                Add New Part
              </Button>
            </DialogTrigger>
            <DialogContent className="bg-popover border-border max-w-2xl">
              <DialogHeader>
                <DialogTitle className="text-foreground">Add New Part</DialogTitle>
              </DialogHeader>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="part-number" className="text-foreground">Part Number *</Label>
                  <Input
                    id="part-number"
                    value={newPart.partNumber}
                    onChange={(e) => setNewPart(prev => ({ ...prev, partNumber: e.target.value }))}
                    placeholder="BRK-PAD-001"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="description" className="text-foreground">Description *</Label>
                  <Input
                    id="description"
                    value={newPart.description}
                    onChange={(e) => setNewPart(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Brake Pads - Front Set"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="category" className="text-foreground">Category *</Label>
                  <Select value={newPart.category} onValueChange={(value) => setNewPart(prev => ({ ...prev, category: value }))}>
                    <SelectTrigger className="bg-input border-border text-foreground">
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent className="bg-popover border-border">
                      {categories.map(category => (
                        <SelectItem key={category} value={category}>{category}</SelectItem>
                      ))}
                      <SelectItem value="new">+ Add New Category</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="current-stock" className="text-foreground">Initial Stock</Label>
                  <Input
                    id="current-stock"
                    type="number"
                    value={newPart.currentStock}
                    onChange={(e) => setNewPart(prev => ({ ...prev, currentStock: e.target.value }))}
                    placeholder="0"
                    min="0"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="min-threshold" className="text-foreground">Min Threshold</Label>
                  <Input
                    id="min-threshold"
                    type="number"
                    value={newPart.minThreshold}
                    onChange={(e) => setNewPart(prev => ({ ...prev, minThreshold: e.target.value }))}
                    placeholder="10"
                    min="0"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="max-capacity" className="text-foreground">Max Capacity</Label>
                  <Input
                    id="max-capacity"
                    type="number"
                    value={newPart.maxCapacity}
                    onChange={(e) => setNewPart(prev => ({ ...prev, maxCapacity: e.target.value }))}
                    placeholder="100"
                    min="1"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="unit-cost" className="text-foreground">Unit Cost</Label>
                  <Input
                    id="unit-cost"
                    type="number"
                    step="0.01"
                    value={newPart.unitCost}
                    onChange={(e) => setNewPart(prev => ({ ...prev, unitCost: e.target.value }))}
                    placeholder="45.99"
                    min="0"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="supplier" className="text-foreground">Supplier</Label>
                  <Input
                    id="supplier"
                    value={newPart.supplier}
                    onChange={(e) => setNewPart(prev => ({ ...prev, supplier: e.target.value }))}
                    placeholder="AutoParts Plus"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div>
                  <Label htmlFor="location" className="text-foreground">Location</Label>
                  <Input
                    id="location"
                    value={newPart.location}
                    onChange={(e) => setNewPart(prev => ({ ...prev, location: e.target.value }))}
                    placeholder="A-1-2"
                    className="bg-input border-border text-foreground"
                  />
                </div>
                <div className="col-span-2">
                  <Button onClick={handleAddNewPart} className="w-full bg-primary text-primary-foreground hover:bg-primary/90">
                    Add New Part
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-foreground">Inventory Filters</CardTitle>
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search by part number or description..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-input border-border text-foreground"
              />
            </div>
            <Select value={categoryFilter} onValueChange={setCategoryFilter}>
              <SelectTrigger className="w-full sm:w-48 bg-input border-border text-foreground">
                <SelectValue placeholder="Category" />
              </SelectTrigger>
              <SelectContent className="bg-popover border-border">
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map(category => (
                  <SelectItem key={category} value={category}>{category}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={stockFilter} onValueChange={setStockFilter}>
              <SelectTrigger className="w-full sm:w-48 bg-input border-border text-foreground">
                <SelectValue placeholder="Stock Status" />
              </SelectTrigger>
              <SelectContent className="bg-popover border-border">
                <SelectItem value="all">All Stock Levels</SelectItem>
                <SelectItem value="low">Low Stock</SelectItem>
                <SelectItem value="good">Good Stock</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border border-border">
            <Table>
              <TableHeader>
                <TableRow className="border-border">
                  <TableHead className="text-foreground">Part Number</TableHead>
                  <TableHead className="text-foreground">Description</TableHead>
                  <TableHead className="text-foreground">Category</TableHead>
                  <TableHead className="text-foreground">Stock Level</TableHead>
                  <TableHead className="text-foreground">Status</TableHead>
                  <TableHead className="text-foreground">Unit Cost</TableHead>
                  <TableHead className="text-foreground">Location</TableHead>
                  <TableHead className="text-foreground">Supplier</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredParts.map((part) => (
                  <TableRow key={part.id} className="border-border hover:bg-muted/50">
                    <TableCell className="font-medium text-foreground">{part.partNumber}</TableCell>
                    <TableCell className="text-foreground">{part.description}</TableCell>
                    <TableCell>
                      <Badge variant="outline">{part.category}</Badge>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-foreground">{part.currentStock} / {part.maxCapacity}</span>
                          <span className="text-muted-foreground">
                            Min: {part.minThreshold}
                          </span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-2">
                          <div
                            className={`h-2 rounded-full ${getStockBarColor(part)}`}
                            style={{ width: `${Math.min((part.currentStock / part.maxCapacity) * 100, 100)}%` }}
                          />
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>{getStockBadge(part)}</TableCell>
                    <TableCell className="text-foreground">${part.unitCost.toFixed(2)}</TableCell>
                    <TableCell className="text-foreground">{part.location}</TableCell>
                    <TableCell className="text-foreground">{part.supplier}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          {filteredParts.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              No parts found matching your criteria
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
